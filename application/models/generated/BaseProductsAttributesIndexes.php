<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ProductsAttributesIndexes', 'doctrine');

/**
 * BaseProductsAttributesIndexes
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $index_id
 * @property integer $product_id
 * @property integer $attribute_id
 * @property string $value
 * @property ProductsAttributes $ProductsAttributes
 * @property Products $Products
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProductsAttributesIndexes extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('products_attributes_indexes');
        $this->hasColumn('index_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('product_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('attribute_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('value', 'string', null, array(
             'type' => 'string',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ProductsAttributes', array(
             'local' => 'attribute_id',
             'foreign' => 'attribute_id'));

        $this->hasOne('Products', array(
             'local' => 'product_id',
             'foreign' => 'product_id'));
    }
}